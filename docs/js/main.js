// Copiado desde assets/js/main.js
class ThemeManager { constructor(){ this.init(); } init(){ document.documentElement.classList.remove('light'); this.updateCurrentYear(); } updateCurrentYear(){ const y=document.getElementById('currentYear'); if(y) y.textContent=new Date().getFullYear(); } }
class TiltEffect { constructor(){ this.init(); } init(){ if(!window.matchMedia('(pointer: fine)').matches) return; if(window.matchMedia('(prefers-reduced-motion: reduce)').matches) return; this.bindEvents(); } bindEvents(){ document.querySelectorAll('[data-tilt]').forEach(c=>{ c.addEventListener('mouseenter',e=>{e.currentTarget.style.transition='none';}); c.addEventListener('mousemove',this.handleMouseMove.bind(this)); c.addEventListener('mouseleave',e=>{const card=e.currentTarget; const icon=card.querySelector('.card-icon'); card.style.transition='all 0.3s ease-out'; card.style.transform=''; if(icon) icon.style.transform=''; setTimeout(()=>{card.style.transition='';},300); }); }); } handleMouseMove(e){ const card=e.currentTarget; const rect=card.getBoundingClientRect(); const cx=rect.left+rect.width/2; const cy=rect.top+rect.height/2; const mx=e.clientX-cx; const my=e.clientY-cy; const rx=(my/rect.height)*-10; const ry=(mx/rect.width)*10; const icon=card.querySelector('.card-icon'); card.style.transform=`perspective(1000px) rotateX(${rx}deg) rotateY(${ry}deg) translateY(-8px)`; if(icon){ icon.style.transform=`translateY(-4px) scale(1.05) translateX(${mx*0.02}px) translateY(${my*0.02}px)`; } } }
class ScrollAnimations { constructor(){ this.init(); } init(){ if(window.matchMedia('(prefers-reduced-motion: reduce)').matches) return; const obs=new IntersectionObserver((entries)=>{ entries.forEach(en=>{ if(en.isIntersecting) en.target.classList.add('animate-in'); }); }, {threshold:0.1, rootMargin:'0px 0px -50px 0px'}); document.querySelectorAll('.section-title, .about-content').forEach(el=>obs.observe(el)); } }
class Navigation { constructor(){ this.init(); } init(){ this.handleSmooth(); this.updateOnScroll(); } handleSmooth(){ document.querySelectorAll('a[href^="#"]').forEach(a=>{ a.addEventListener('click',e=>{ e.preventDefault(); const tgt=document.querySelector(a.getAttribute('href')); if(tgt) tgt.scrollIntoView({behavior:'smooth', block:'start'}); }); }); } updateOnScroll(){ let ticking=false; const update=()=>{ const nav=document.querySelector('.navbar'); if(nav){ if(window.scrollY>50) nav.classList.add('scrolled'); else nav.classList.remove('scrolled'); } ticking=false; }; window.addEventListener('scroll',()=>{ if(!ticking){ requestAnimationFrame(update); ticking=true; } }); } }
class Utils { static preloadImages(){ document.querySelectorAll('img[data-src]').forEach(img=>{ const src=img.dataset.src; if(src){ const l=new Image(); l.onload=()=>{ img.src=src; img.classList.add('loaded'); }; l.src=src; } }); } }
class ErrorHandler { constructor(){ this.init(); } init(){ window.addEventListener('error',e=>console.error('Script error:',e.error)); window.addEventListener('unhandledrejection',e=>console.error('Unhandled promise rejection:',e.reason)); } }
class App { constructor(){ this.init(); } init(){ if(document.readyState==='loading'){ document.addEventListener('DOMContentLoaded',()=>this.bootstrap()); } else { this.bootstrap(); } } bootstrap(){ try{ new ErrorHandler(); new ThemeManager(); new TiltEffect(); new ScrollAnimations(); new Navigation(); Utils.preloadImages(); this.optimizePerformance(); }catch(err){ console.error('Failed to initialize app:',err); } } optimizePerformance(){ let t; window.addEventListener('scroll',()=>{ document.body.classList.add('scrolling'); clearTimeout(t); t=setTimeout(()=>document.body.classList.remove('scrolling'),100); }); } }
new App();
